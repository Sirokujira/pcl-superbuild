find_package(PythonInterp REQUIRED)
find_package(Git REQUIRED)

option(BUILD_ANDROID "Build for Android" ON)
option(BUILD_IOS_DEVICE "Build for iOS device" OFF)
option(BUILD_IOS_SIMULATOR "Build for iOS simulator" OFF)

# set ccache options
option(CCACHE_ENABLE "If the command ccache is avilable, use it for compile." ON)
find_program(CCACHE_EXE ccache)
if(CCACHE_EXE)
  if(CCACHE_ENABLE)
    message(STATUS "Enable ccache")
    if(CMAKE_C_COMPILER_LAUNCHER)
      set(CMAKE_C_COMPILER_LAUNCHER "${CMAKE_C_COMPILER_LAUNCHER}" "${CCACHE_EXE}")
    else()
      set(CMAKE_C_COMPILER_LAUNCHER "${CCACHE_EXE}")
    endif()
    
    if(CMAKE_CXX_COMPILER_LAUNCHER)
      set(CMAKE_CXX_COMPILER_LAUNCHER "${CMAKE_CXX_COMPILER_LAUNCHER}" "${CCACHE_EXE}")
    else()
      set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_EXE}")
    endif()
  endif()
endif()

set(toolchain_dir ${CMAKE_SOURCE_DIR}/toolchains)
# set(toolchain_ios_simulator ${toolchain_dir}/toolchain-ios-simulator.cmake)
# set(toolchain_ios_device ${toolchain_dir}/toolchain-ios-device.cmake)
# set(toolchain_ios_simulator ${toolchain_dir}/iOS.cmake)
# set(toolchain_ios_device ${toolchain_dir}/iOS.cmake)
# set(toolchain_ios_simulator ${toolchain_dir}/iOS_Simulation.toolchain.cmake)
# set(toolchain_ios_device ${toolchain_dir}/iOS.toolchain.cmake)
set(toolchain_ios_simulator ${toolchain_dir}/iOS_Simulation.cmake)
set(toolchain_ios_device ${toolchain_dir}/iOS_Device.cmake)
# use Android NDK cmake file
set(toolchain_android $ENV{ANDROID_NDK}/build/cmake/android.toolchain.cmake)
set(try_run_results_vtk_ios_simulator ${toolchain_dir}/vtk-try-run-results.cmake)
set(try_run_results_vtk_ios_device ${toolchain_dir}/vtk-try-run-results.cmake)
set(try_run_results_vtk_android ${toolchain_dir}/vtk-try-run-results.cmake)
set(try_run_results_pcl_ios_simulator ${toolchain_dir}/pcl-try-run-results.cmake)
set(try_run_results_pcl_ios_device ${toolchain_dir}/pcl-try-run-results.cmake)
set(try_run_results_pcl_android ${toolchain_dir}/pcl-try-run-results.cmake)
