# This file was generated by CMake because it detected TRY_RUN() commands
# in crosscompiling mode. It will be overwritten by the next CMake run.
# Copy it to a safe location, set the variables to appropriate values
# and use it then to preset the CMake cache (using -C).


# HAVE_POSIX_MEMALIGN_EXITCODE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HAVE_POSIX_MEMALIGN_EXITCODE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# The HAVE_POSIX_MEMALIGN_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : CMakeFiles/CMakeTmp/src.cxx
# Executable    : CMakeFiles/cmTryCompileExec2188458189-HAVE_POSIX_MEMALIGN_EXITCODE
# Run arguments : 
#    Called from: [1]	CMakeLists.txt

SET( HAVE_POSIX_MEMALIGN_EXITCODE 
     0
     CACHE STRING "Result from TRY_RUN" FORCE)

# macro to find programs on the host OS 
# use cmake FindCUDA
# https://gitlab.kitware.com/cmake/cmake/issues/16509
macro(find_host_program)
    set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER ) 
    set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER ) 
    set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER ) 
    if( CMAKE_HOST_WIN32 ) 
        SET( WIN32 1 ) 
        SET( UNIX ) 
    elseif( CMAKE_HOST_APPLE ) 
        SET( APPLE 1 ) 
        SET( UNIX ) 
    endif() 
    find_program( ${ARGN} ) 
    SET( WIN32 ) 
    SET( APPLE ) 
    SET( UNIX 1 ) 
    set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY ) 
    set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY ) 
    set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY ) 
endmacro() 